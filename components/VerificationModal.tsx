"use client";

import { useState } from 'react';
import VerificationQR from './VerificationQR';
import { PackageCondition, VerificationData, addVerificationRecord } from '../utils/verification';
import { DeliveryStatus } from '../services/LocalDeliveryService';

interface VerificationModalProps {
  isOpen: boolean;
  onClose: () => void;
  packageId: string;
  location: [number, number];
  status: DeliveryStatus;
  verifiedBy: string;
  onVerificationComplete: () => void;
}

export default function VerificationModal({
  isOpen,
  onClose,
  packageId,
  location,
  status,
  verifiedBy,
  onVerificationComplete
}: VerificationModalProps) {
  const [step, setStep] = useState<'QR' | 'PHYSICAL' | 'COMPLETE'>('QR');
  const [packageCondition, setPackageCondition] = useState<PackageCondition | null>(null);

  const handleVerified = (condition: PackageCondition) => {
    setPackageCondition(condition);
    setStep('PHYSICAL');
  };

  const handlePhysicalVerification = async () => {
    if (!packageCondition) return;

    // Record the verification
    const verificationData: VerificationData = {
      hash: '', // This will be generated by the verification service
      timestamp: Date.now(),
      location,
      status,
      verifiedBy
    };

    addVerificationRecord(packageId, verificationData);
    setStep('COMPLETE');
  };

  const handleComplete = () => {
    onVerificationComplete();
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
        {step === 'QR' && (
          <VerificationQR
            packageId={packageId}
            location={location}
            status={status}
            verifiedBy={verifiedBy}
            onVerified={handleVerified}
          />
        )}

        {step === 'PHYSICAL' && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Physical Verification</h3>
            
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span>Seal Integrity:</span>
                <span className={packageCondition?.sealIntact ? 'text-green-600' : 'text-red-600'}>
                  {packageCondition?.sealIntact ? '✓ Intact' : '✗ Compromised'}
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span>Package Condition:</span>
                <span className={packageCondition?.packageIntact ? 'text-green-600' : 'text-red-600'}>
                  {packageCondition?.packageIntact ? '✓ Good' : '✗ Damaged'}
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span>Temperature:</span>
                <span className={packageCondition?.temperatureOk ? 'text-green-600' : 'text-red-600'}>
                  {packageCondition?.temperatureOk ? '✓ Normal' : '✗ Alert'}
                </span>
              </div>
              
              <div className="flex items-center justify-between">
                <span>Humidity:</span>
                <span className={packageCondition?.humidityOk ? 'text-green-600' : 'text-red-600'}>
                  {packageCondition?.humidityOk ? '✓ Normal' : '✗ Alert'}
                </span>
              </div>
            </div>

            <button
              onClick={handlePhysicalVerification}
              className="w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600"
            >
              Confirm Physical Verification
            </button>
          </div>
        )}

        {step === 'COMPLETE' && (
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-green-600">Verification Complete</h3>
            
            <div className="text-center">
              <div className="text-5xl mb-4">✓</div>
              <p className="text-gray-600">
                Package has been successfully verified and recorded.
              </p>
            </div>

            <button
              onClick={handleComplete}
              className="w-full bg-green-500 text-white py-2 rounded-md hover:bg-green-600"
            >
              Close
            </button>
          </div>
        )}

        {step !== 'COMPLETE' && (
          <button
            onClick={onClose}
            className="mt-4 w-full border border-gray-300 text-gray-600 py-2 rounded-md hover:bg-gray-50"
          >
            Cancel
          </button>
        )}
      </div>
    </div>
  );
} 